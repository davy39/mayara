// source: src/protos/RadarMessage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.RadarMessage');
goog.provide('proto.RadarMessage.ControlValue');
goog.provide('proto.RadarMessage.Spoke');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RadarMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RadarMessage.repeatedFields_, null);
};
goog.inherits(proto.RadarMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RadarMessage.displayName = 'proto.RadarMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RadarMessage.Spoke = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RadarMessage.Spoke, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RadarMessage.Spoke.displayName = 'proto.RadarMessage.Spoke';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RadarMessage.ControlValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RadarMessage.ControlValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RadarMessage.ControlValue.displayName = 'proto.RadarMessage.ControlValue';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RadarMessage.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RadarMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.RadarMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RadarMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RadarMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    radar: jspb.Message.getFieldWithDefault(msg, 1, 0),
    spokesList: jspb.Message.toObjectList(msg.getSpokesList(),
    proto.RadarMessage.Spoke.toObject, includeInstance),
    controlsList: jspb.Message.toObjectList(msg.getControlsList(),
    proto.RadarMessage.ControlValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RadarMessage}
 */
proto.RadarMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RadarMessage;
  return proto.RadarMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RadarMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RadarMessage}
 */
proto.RadarMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRadar(value);
      break;
    case 2:
      var value = new proto.RadarMessage.Spoke;
      reader.readMessage(value,proto.RadarMessage.Spoke.deserializeBinaryFromReader);
      msg.addSpokes(value);
      break;
    case 3:
      var value = new proto.RadarMessage.ControlValue;
      reader.readMessage(value,proto.RadarMessage.ControlValue.deserializeBinaryFromReader);
      msg.addControls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RadarMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RadarMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RadarMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RadarMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRadar();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSpokesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.RadarMessage.Spoke.serializeBinaryToWriter
    );
  }
  f = message.getControlsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.RadarMessage.ControlValue.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RadarMessage.Spoke.prototype.toObject = function(opt_includeInstance) {
  return proto.RadarMessage.Spoke.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RadarMessage.Spoke} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RadarMessage.Spoke.toObject = function(includeInstance, msg) {
  var f, obj = {
    angle: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bearing: jspb.Message.getFieldWithDefault(msg, 2, 0),
    range: jspb.Message.getFieldWithDefault(msg, 3, 0),
    time: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lat: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lon: jspb.Message.getFieldWithDefault(msg, 7, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RadarMessage.Spoke}
 */
proto.RadarMessage.Spoke.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RadarMessage.Spoke;
  return proto.RadarMessage.Spoke.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RadarMessage.Spoke} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RadarMessage.Spoke}
 */
proto.RadarMessage.Spoke.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAngle(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBearing(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRange(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLat(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLon(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RadarMessage.Spoke.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RadarMessage.Spoke.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RadarMessage.Spoke} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RadarMessage.Spoke.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAngle();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRange();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional uint32 angle = 1;
 * @return {number}
 */
proto.RadarMessage.Spoke.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.RadarMessage.Spoke} returns this
 */
proto.RadarMessage.Spoke.prototype.setAngle = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 bearing = 2;
 * @return {number}
 */
proto.RadarMessage.Spoke.prototype.getBearing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.RadarMessage.Spoke} returns this
 */
proto.RadarMessage.Spoke.prototype.setBearing = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RadarMessage.Spoke} returns this
 */
proto.RadarMessage.Spoke.prototype.clearBearing = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RadarMessage.Spoke.prototype.hasBearing = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 range = 3;
 * @return {number}
 */
proto.RadarMessage.Spoke.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.RadarMessage.Spoke} returns this
 */
proto.RadarMessage.Spoke.prototype.setRange = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 time = 4;
 * @return {number}
 */
proto.RadarMessage.Spoke.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.RadarMessage.Spoke} returns this
 */
proto.RadarMessage.Spoke.prototype.setTime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RadarMessage.Spoke} returns this
 */
proto.RadarMessage.Spoke.prototype.clearTime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RadarMessage.Spoke.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 lat = 6;
 * @return {number}
 */
proto.RadarMessage.Spoke.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.RadarMessage.Spoke} returns this
 */
proto.RadarMessage.Spoke.prototype.setLat = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RadarMessage.Spoke} returns this
 */
proto.RadarMessage.Spoke.prototype.clearLat = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RadarMessage.Spoke.prototype.hasLat = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 lon = 7;
 * @return {number}
 */
proto.RadarMessage.Spoke.prototype.getLon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.RadarMessage.Spoke} returns this
 */
proto.RadarMessage.Spoke.prototype.setLon = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RadarMessage.Spoke} returns this
 */
proto.RadarMessage.Spoke.prototype.clearLon = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RadarMessage.Spoke.prototype.hasLon = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.RadarMessage.Spoke.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes data = 5;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.RadarMessage.Spoke.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.RadarMessage.Spoke.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.RadarMessage.Spoke} returns this
 */
proto.RadarMessage.Spoke.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RadarMessage.ControlValue.prototype.toObject = function(opt_includeInstance) {
  return proto.RadarMessage.ControlValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RadarMessage.ControlValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RadarMessage.ControlValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0),
    auto: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    description: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RadarMessage.ControlValue}
 */
proto.RadarMessage.ControlValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RadarMessage.ControlValue;
  return proto.RadarMessage.ControlValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RadarMessage.ControlValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RadarMessage.ControlValue}
 */
proto.RadarMessage.ControlValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuto(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RadarMessage.ControlValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RadarMessage.ControlValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RadarMessage.ControlValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RadarMessage.ControlValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.RadarMessage.ControlValue.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.RadarMessage.ControlValue} returns this
 */
proto.RadarMessage.ControlValue.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 value = 2;
 * @return {number}
 */
proto.RadarMessage.ControlValue.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.RadarMessage.ControlValue} returns this
 */
proto.RadarMessage.ControlValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool auto = 3;
 * @return {boolean}
 */
proto.RadarMessage.ControlValue.prototype.getAuto = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RadarMessage.ControlValue} returns this
 */
proto.RadarMessage.ControlValue.prototype.setAuto = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RadarMessage.ControlValue} returns this
 */
proto.RadarMessage.ControlValue.prototype.clearAuto = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RadarMessage.ControlValue.prototype.hasAuto = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.RadarMessage.ControlValue.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.RadarMessage.ControlValue} returns this
 */
proto.RadarMessage.ControlValue.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RadarMessage.ControlValue} returns this
 */
proto.RadarMessage.ControlValue.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RadarMessage.ControlValue.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 radar = 1;
 * @return {number}
 */
proto.RadarMessage.prototype.getRadar = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.RadarMessage} returns this
 */
proto.RadarMessage.prototype.setRadar = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Spoke spokes = 2;
 * @return {!Array<!proto.RadarMessage.Spoke>}
 */
proto.RadarMessage.prototype.getSpokesList = function() {
  return /** @type{!Array<!proto.RadarMessage.Spoke>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RadarMessage.Spoke, 2));
};


/**
 * @param {!Array<!proto.RadarMessage.Spoke>} value
 * @return {!proto.RadarMessage} returns this
*/
proto.RadarMessage.prototype.setSpokesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.RadarMessage.Spoke=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RadarMessage.Spoke}
 */
proto.RadarMessage.prototype.addSpokes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.RadarMessage.Spoke, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RadarMessage} returns this
 */
proto.RadarMessage.prototype.clearSpokesList = function() {
  return this.setSpokesList([]);
};


/**
 * repeated ControlValue controls = 3;
 * @return {!Array<!proto.RadarMessage.ControlValue>}
 */
proto.RadarMessage.prototype.getControlsList = function() {
  return /** @type{!Array<!proto.RadarMessage.ControlValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RadarMessage.ControlValue, 3));
};


/**
 * @param {!Array<!proto.RadarMessage.ControlValue>} value
 * @return {!proto.RadarMessage} returns this
*/
proto.RadarMessage.prototype.setControlsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.RadarMessage.ControlValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RadarMessage.ControlValue}
 */
proto.RadarMessage.prototype.addControls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.RadarMessage.ControlValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RadarMessage} returns this
 */
proto.RadarMessage.prototype.clearControlsList = function() {
  return this.setControlsList([]);
};


